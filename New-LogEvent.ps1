<#
.SYNOPSIS
    Generates a custom event in Windows Event Viewer.

.DESCRIPTION
    This script accepts a target event log path and a character count, then generates
    a test event message of the specified length in the given log.

.PARAMETER Size
    The number of characters in the event message.

.PARAMETER Path
    The name of the Event Log (e.g., "Application", "System", or a custom log).

.EXAMPLE
    .\New-LogEvent.ps1 -Size 8000 -Path "Application"
#>

param(
    [Parameter(Mandatory=$true)]
    [ValidateRange(1,32000)]
    [int]$Size,

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]$Path,

    [Parameter(Mandatory=$false)]
    [ValidateNotNullOrEmpty()]
    [string]$Source = "CustomEventSource"
)

function Write-CustomEventLog {
    param(
        [int]$SizeChars,
        [string]$LogName,
        [string]$Source
    )

    try {
        if (-not [System.Diagnostics.EventLog]::SourceExists($Source)) {
            [System.Diagnostics.EventLog]::CreateEventSource($Source, $LogName)
        }
    }
    catch {
        Write-Warning "Could not verify or create event source. Try running as Administrator."
        exit 1
    }

    $baseMessage   = "This is a test event generated by Write-CustomEventLog."
    $paddingLength = [Math]::Max(0, $SizeChars - $baseMessage.Length)
    $padding       = "X" * $paddingLength
    $finalMessage  = $baseMessage + $padding

    try {
        Write-EventLog -LogName   $LogName `
                       -Source    $Source `
                       -EventId   1001 `
                       -EntryType Information `
                       -Message   $finalMessage
        Write-Output "Event written to $LogName with size $($finalMessage.Length) characters"
    }
    catch {
        Write-Warning "Failed to write event to $LogName. $_"
        exit 2
    }
}

# Call the function
Write-CustomEventLog -SizeChars $Size -LogName $Path -Source $Source